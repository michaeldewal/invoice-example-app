{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/lib/router.js","filenameRelative":"/lib/router.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/router.js.map","sourceFileName":"/lib/router.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"router"},"ignored":false,"code":"FlowRouter.route(\"/:type\", {\n    name: \"invoices\",\n    subscriptions: function () {\n        function subscriptions(params, queryParams) {\n            this.register(\"invoiceCollection\", Meteor.subscribe(\"invoiceCollection\", params.type, queryParams));\n        }\n\n        return subscriptions;\n    }(),\n    action: function () {\n        function action(params, queryParams) {\n            BlazeLayout.render(\"invoicesTemplate\");\n        }\n\n        return action;\n    }()\n});\nFlowRouter.route(\"/\", {\n    action: function () {\n        function action(params, queryParams) {\n            Router.go({ type: 'all' });\n        }\n\n        return action;\n    }()\n});\n\nRouter = {\n    route: '',\n    reactvar: new ReactiveVar(0),\n    setRoute: function () {\n        function setRoute(routeName) {\n            this.route = routeName;\n        }\n\n        return setRoute;\n    }(),\n\n    resetQuery: function () {\n        function resetQuery() {\n            FlowRouter.go(FlowRouter.path(this.route, FlowRouter.current().params));\n        }\n\n        return resetQuery;\n    }(),\n\n    go: function () {\n        function go(routeParams) {\n            var queryParamName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n\n\n            var currentQueryParams = FlowRouter.current().queryParams;\n\n            if (routeParams === '') routeParams = FlowRouter.current().params;\n\n            if (currentQueryParams.hasOwnProperty(queryParamName)) {\n                currentQueryParams[queryParamName] = currentQueryParams[queryParamName] == 'ASC' ? 'DESC' : 'ASC';\n            } else if (queryParamName !== '') {\n                currentQueryParams[queryParamName] = 'ASC';\n            }\n\n            this.reactvar.set(this.reactvar.get() === 1 ? 0 : 1);\n            if (!isEmpty(currentQueryParams)) {\n                FlowRouter.go(FlowRouter.path(this.route, routeParams, currentQueryParams));\n            } else {\n                FlowRouter.go(FlowRouter.path(this.route, routeParams));\n            }\n        }\n\n        return go;\n    }(),\n\n    getParams: function () {\n        function getParams() {\n            return FlowRouter.current().params;\n        }\n\n        return getParams;\n    }(),\n\n    getQueryParams: function () {\n        function getQueryParams() {\n            return FlowRouter.current().queryParams === undefined ? {} : FlowRouter.current().queryParams;\n        }\n\n        return getQueryParams;\n    }(),\n    addQueryParam: function () {\n        function addQueryParam(name, value) {\n\n            var params = FlowRouter.current().queryParams;\n            params[name] = value;\n\n            FlowRouter.setQueryParams(params);\n        }\n\n        return addQueryParam;\n    }()\n};","ast":null,"map":{"version":3,"sources":["/lib/router.js"],"names":[],"mappings":"AAAA,WAAW,KAAX,CAAiB,QAAjB,EAA2B;AACvB,UAAM,UAAN;AACA;AAAe,+BAAS,MAAT,EAAiB,WAAjB,EAA8B;AACrC,iBAAK,QAAL,CAAc,mBAAd,EAAmC,OAAO,SAAP,CAAiB,mBAAjB,EAAsC,OAAO,IAAP,EAAa,WAAnD,CAAnC,EADqC;SAA9B;;;OAAf;AAGA;AAAQ,wBAAS,MAAT,EAAiB,WAAjB,EAA8B;AAClC,wBAAY,MAAZ,CAAmB,kBAAnB,EADkC;SAA9B;;;OAAR;CALJ;AASA,WAAW,KAAX,CAAiB,GAAjB,EAAsB;AAClB;AAAQ,wBAAS,MAAT,EAAiB,WAAjB,EAA8B;AAClC,mBAAO,EAAP,CAAU,EAAC,MAAM,KAAN,EAAX,EADkC;SAA9B;;;OAAR;CADJ;;AAMA,SAAS;AACL,WAAO,EAAP;AACA,cAAU,IAAI,WAAJ,CAAgB,CAAhB,CAAV;AACA;AAAU,0BAAS,SAAT,EAAoB;AAC1B,iBAAK,KAAL,GAAa,SAAb,CAD0B;SAApB;;;OAAV;;AAIA;AAAY,8BAAW;AACnB,uBAAW,EAAX,CAAc,WAAW,IAAX,CAAgB,KAAK,KAAL,EAAY,WAAW,OAAX,GAAqB,MAArB,CAA1C,EADmB;SAAX;;;OAAZ;;AAIA;AAAI,oBAAS,WAAT,EAA2C;gBAArB,uEAAiB,kBAAI;;;AAE3C,gBAAM,qBAAqB,WAAW,OAAX,GAAqB,WAArB,CAFgB;;AAI3C,gBAAG,gBAAgB,EAAhB,EACC,cAAc,WAAW,OAAX,GAAqB,MAArB,CADlB;;AAGA,gBAAG,mBAAmB,cAAnB,CAAkC,cAAlC,CAAH,EAAsD;AAClD,mCAAmB,cAAnB,IAAqC,kBAAC,CAAmB,cAAnB,KAAsC,KAAtC,GAA6C,MAA9C,GAAqD,KAArD,CADa;aAAtD,MAEO,IAAG,mBAAmB,EAAnB,EACV;AACI,mCAAmB,cAAnB,IAAqC,KAArC,CADJ;aADO;;AAKP,iBAAK,QAAL,CAAc,GAAd,CAAmB,KAAK,QAAL,CAAc,GAAd,OAAwB,CAAxB,GAA0B,CAA1B,GAA4B,CAA5B,CAAnB,CAd2C;AAe3C,gBAAG,CAAC,QAAQ,kBAAR,CAAD,EAA8B;AAC7B,2BAAW,EAAX,CAAc,WAAW,IAAX,CAAgB,KAAK,KAAL,EAAY,WAA5B,EAAyC,kBAAzC,CAAd,EAD6B;aAAjC,MAEO;AACH,2BAAW,EAAX,CAAc,WAAW,IAAX,CAAgB,KAAK,KAAL,EAAY,WAA5B,CAAd,EADG;aAFP;SAfA;;;OAAJ;;AAsBA;AAAW,6BAAW;AAClB,mBAAO,WAAW,OAAX,GAAqB,MAArB,CADW;SAAX;;;OAAX;;AAIA;AAAgB,kCAAW;AACvB,mBAAO,UAAC,CAAW,OAAX,GAAqB,WAArB,KAAqC,SAArC,GAAgD,EAAjD,GAAoD,WAAW,OAAX,GAAqB,WAArB,CADpC;SAAX;;;OAAhB;AAGA;AAAe,+BAAS,IAAT,EAAe,KAAf,EAAsB;;AAEjC,gBAAM,SAAS,WAAW,OAAX,GAAqB,WAArB,CAFkB;AAGjC,mBAAO,IAAP,IAAe,KAAf,CAHiC;;AAKjC,uBAAW,cAAX,CAA0B,MAA1B,EALiC;SAAtB;;;OAAf;CAxCJ","file":"/lib/router.js.map","sourcesContent":["FlowRouter.route(\"/:type\", {\r\n    name: \"invoices\",\r\n    subscriptions: function(params, queryParams) {\r\n            this.register(\"invoiceCollection\", Meteor.subscribe(\"invoiceCollection\", params.type, queryParams));\r\n    },\r\n    action: function(params, queryParams) {\r\n        BlazeLayout.render(\"invoicesTemplate\");\r\n    }\r\n});\r\nFlowRouter.route(\"/\", {\r\n    action: function(params, queryParams) {\r\n        Router.go({type: 'all'});\r\n    }\r\n});\r\n\r\nRouter = {\r\n    route: '',\r\n    reactvar: new ReactiveVar(0),\r\n    setRoute: function(routeName) {\r\n        this.route = routeName;\r\n    },\r\n\r\n    resetQuery: function() {\r\n        FlowRouter.go(FlowRouter.path(this.route, FlowRouter.current().params));\r\n    },\r\n\r\n    go: function(routeParams, queryParamName = '') {\r\n\r\n        const currentQueryParams = FlowRouter.current().queryParams;\r\n        \r\n        if(routeParams === '')\r\n            routeParams = FlowRouter.current().params;\r\n\r\n        if(currentQueryParams.hasOwnProperty(queryParamName)) {\r\n            currentQueryParams[queryParamName] = (currentQueryParams[queryParamName] == 'ASC')?'DESC':'ASC'\r\n        } else if(queryParamName !== '')\r\n        {\r\n            currentQueryParams[queryParamName] = 'ASC';\r\n        }\r\n\r\n        this.reactvar.set((this.reactvar.get() === 1?0:1));\r\n        if(!isEmpty(currentQueryParams)) {\r\n            FlowRouter.go(FlowRouter.path(this.route, routeParams, currentQueryParams));\r\n        } else {\r\n            FlowRouter.go(FlowRouter.path(this.route, routeParams));\r\n        }\r\n    },\r\n\r\n    getParams: function() {\r\n        return FlowRouter.current().params;\r\n    },\r\n\r\n    getQueryParams: function() {\r\n        return (FlowRouter.current().queryParams === undefined)?{}:FlowRouter.current().queryParams;\r\n    },\r\n    addQueryParam: function(name, value) {\r\n\r\n        const params = FlowRouter.current().queryParams;\r\n        params[name] = value;\r\n\r\n        FlowRouter.setQueryParams(params);\r\n    }\r\n};"]},"hash":"bd04f60788a03e16f6a16e7709398bed9e40f45e"}
