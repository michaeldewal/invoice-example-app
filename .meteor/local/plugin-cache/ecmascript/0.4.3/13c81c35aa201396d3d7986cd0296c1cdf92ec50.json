{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/lib/invoiceCollection.js","filenameRelative":"/lib/invoiceCollection.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/lib/invoiceCollection.js.map","sourceFileName":"/lib/invoiceCollection.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"invoiceCollection"},"ignored":false,"code":"invoices = new Mongo.Collection(\"invoices\");\ninvoices.limit_results_by = 50;\ninvoices.limit_increase_by = 50;\ninvoices.byTimeRange = function () {\n  var timeRange = arguments.length <= 0 || arguments[0] === undefined ? \"today\" : arguments[0];\n  var queryParams = arguments[1];\n\n  var limit = invoices.limit_results_by;\n\n  if (queryParams !== undefined && queryParams.hasOwnProperty('limit')) {\n    limit = parseInt(queryParams.limit);\n    delete queryParams['limit'];\n  }\n\n  queryParams = isEmpty(queryParams) ? { sortCreatedAt: \"DESC\", sortTotal: \"ASC\" } : queryParams;\n\n  console.log(queryParams);\n  var sort = {};\n  var filter = {};\n  for (var k in meteorBabelHelpers.sanitizeForInObject(queryParams)) {\n    console.log('k', k);\n    if (k.indexOf('sort') > -1) {\n      sort[k.replace('sort', '').firstToType('lower')] = queryParams[k] === 'DESC' ? -1 : 1;\n    } else if (k.indexOf('filter') > -1) {\n      filter[k.replace('filter', '').firstToType('lower')] = parseInt(queryParams[k]);\n    }\n  }\n\n  var getTimeRange = function getTimeRange(timeRange) {\n    var _today = new Date();\n    var timeRanges = {\n      today: function () {\n        function today() {\n          _today.setSeconds(0);\n          _today.setMinutes(0);\n          _today.setHours(0);\n          return _today;\n        }\n\n        return today;\n      }(),\n      week: function () {\n        function week() {\n          return new Date(_today.getFullYear(), _today.getMonth(), _today.getDate() - 7);\n        }\n\n        return week;\n      }(),\n      month: function () {\n        function month() {\n          return new Date(_today.getFullYear(), _today.getMonth() - 1, _today.getDate());\n        }\n\n        return month;\n      }(),\n      all: function () {\n        function all() {\n          return false;\n        }\n\n        return all;\n      }()\n    };\n\n    if (timeRanges[timeRange]) {\n      return timeRanges[timeRange]();\n    } else {\n      return timeRanges['today']();\n    }\n  };\n\n  var selectedDate = getTimeRange(timeRange);\n\n  if (selectedDate !== false) filter.createdAt = { '$gte': selectedDate };\n  console.log(filter);\n  return invoices.find(filter, { sort: sort });\n};\n\n/*\r\ninvoices.createFilter = function(params){\r\n  let fn;\r\n  const typeCaster = function(type, variable) {\r\n    const types = {\r\n      text(v) {\r\n        return v;\r\n      },\r\n      number(v) {\r\n        return parseInt(v);\r\n      },\r\n      date(v) {\r\n        return new Date(v);\r\n      }\r\n    };\r\n    if(types[type]) {\r\n      return types[type](variable);\r\n    } else {\r\n      return types['text'](variable);\r\n    }\r\n  };\r\n  let filter = {};\r\n  params.forEach(function(param){\r\n    filter[param.name] = typeCaster(params.type, params,value);\r\n  });\r\n\r\n  console.log(filter);\r\n};\r\n  */","ast":null,"map":{"version":3,"sources":["/lib/invoiceCollection.js"],"names":[],"mappings":"AAAA,WAAW,IAAI,MAAM,UAAN,CAAiB,UAArB,CAAX;AACA,SAAS,gBAAT,GAA4B,EAA5B;AACA,SAAS,iBAAT,GAA6B,EAA7B;AACA,SAAS,WAAT,GAAuB,YAA2C;MAAlC,kEAAY,uBAAsB;MAAb,2BAAa;;AAChE,MAAI,QAAQ,SAAS,gBAAT,CADoD;;AAGhE,MAAI,gBAAgB,SAAhB,IAA6B,YAAY,cAAZ,CAA2B,OAA3B,CAA7B,EAAkE;AACpE,YAAQ,SAAS,YAAY,KAAZ,CAAjB,CADoE;AAEpE,WAAO,YAAY,OAAZ,CAAP,CAFoE;GAAtE;;AAKA,gBAAc,OAAC,CAAQ,WAAR,CAAD,GAAyB,EAAC,eAAe,MAAf,EAAuB,WAAW,KAAX,EAAjD,GAAqE,WAArE,CARkD;;AAUhE,UAAQ,GAAR,CAAY,WAAZ,EAVgE;AAWhE,MAAM,OAAO,EAAP,CAX0D;AAYhE,MAAM,SAAS,EAAT,CAZ0D;AAahE,OAAK,IAAI,CAAJ,2CAAS,YAAd,EAA2B;AACzB,YAAQ,GAAR,CAAY,GAAZ,EAAiB,CAAjB,EADyB;AAEzB,QAAG,EAAE,OAAF,CAAU,MAAV,IAAoB,CAAC,CAAD,EAAI;AACzB,WAAK,EAAE,OAAF,CAAU,MAAV,EAAkB,EAAlB,EAAsB,WAAtB,CAAkC,OAAlC,CAAL,IAAmD,WAAC,CAAY,CAAZ,MAAmB,MAAnB,GAA6B,CAAC,CAAD,GAAK,CAAnC,CAD1B;KAA3B,MAEO,IAAG,EAAE,OAAF,CAAU,QAAV,IAAsB,CAAC,CAAD,EAAI;AAClC,aAAO,EAAE,OAAF,CAAU,QAAV,EAAoB,EAApB,EAAwB,WAAxB,CAAoC,OAApC,CAAP,IAAuD,SAAS,YAAY,CAAZ,CAAT,CAAvD,CADkC;KAA7B;GAJT;;AASA,MAAM,eAAe,SAAf,YAAe,CAAS,SAAT,EAAoB;AACvC,QAAM,SAAQ,IAAI,IAAJ,EAAR,CADiC;AAEvC,QAAM,aAAa;AACjB;yBAAO;AACL,iBAAM,UAAN,CAAiB,CAAjB,EADK;AAEL,iBAAM,UAAN,CAAiB,CAAjB,EAFK;AAGL,iBAAM,QAAN,CAAe,CAAf,EAHK;AAIL,iBAAO,MAAP,CAJK;;;;SADU;AAOjB;wBAAM;AACJ,iBAAO,IAAI,IAAJ,CAAS,OAAM,WAAN,EAAT,EAA8B,OAAM,QAAN,EAA9B,EAAgD,OAAM,OAAN,KAAkB,CAAlB,CAAvD,CADI;;;;SAPW;AAUjB;yBAAO;AACL,iBAAO,IAAI,IAAJ,CAAS,OAAM,WAAN,EAAT,EAA8B,OAAM,QAAN,KAAmB,CAAnB,EAAsB,OAAM,OAAN,EAApD,CAAP,CADK;;;;SAVU;AAajB;uBAAK;AACH,iBAAO,KAAP,CADG;;;;SAbY;KAAb,CAFiC;;AAoBvC,QAAG,WAAW,SAAX,CAAH,EAA0B;AACxB,aAAO,WAAW,SAAX,GAAP,CADwB;KAA1B,MAEO;AACL,aAAO,WAAW,OAAX,GAAP,CADK;KAFP;GApBmB,CAtB2C;;AAiDhE,MAAM,eAAe,aAAa,SAAb,CAAf,CAjD0D;;AAoDhE,MAAG,iBAAiB,KAAjB,EAAwB,OAAO,SAAP,GAAmB,EAAE,QAAQ,YAAR,EAArB,CAA3B;AACA,UAAQ,GAAR,CAAY,MAAZ,EArDgE;AAsDhE,SAAO,SAAS,IAAT,CAAc,MAAd,EAAsB,EAAC,MAAM,IAAN,EAAvB,CAAP,CAtDgE;CAA3C","file":"/lib/invoiceCollection.js.map","sourcesContent":["invoices = new Mongo.Collection(\"invoices\");\r\ninvoices.limit_results_by = 50;\r\ninvoices.limit_increase_by = 50;\r\ninvoices.byTimeRange = function(timeRange = \"today\", queryParams) {\r\n  let limit = invoices.limit_results_by;\r\n\r\n  if (queryParams !== undefined && queryParams.hasOwnProperty('limit')) {\r\n    limit = parseInt(queryParams.limit);\r\n    delete queryParams['limit'];\r\n  }\r\n\r\n  queryParams = (isEmpty(queryParams)) ? {sortCreatedAt: \"DESC\", sortTotal: \"ASC\"} : queryParams;\r\n\r\n  console.log(queryParams);\r\n  const sort = {};\r\n  const filter = {};\r\n  for (let k in queryParams) {\r\n    console.log('k', k);\r\n    if(k.indexOf('sort') > -1) {\r\n      sort[k.replace('sort', '').firstToType('lower')] = (queryParams[k] === 'DESC') ? -1 : 1;\r\n    } else if(k.indexOf('filter') > -1) {\r\n      filter[k.replace('filter', '').firstToType('lower')] = parseInt(queryParams[k]);\r\n    }\r\n  }\r\n\r\n  const getTimeRange = function(timeRange) {\r\n    const today = new Date();\r\n    const timeRanges = {\r\n      today(){\r\n        today.setSeconds(0);\r\n        today.setMinutes(0);\r\n        today.setHours(0);\r\n        return today;\r\n      },\r\n      week(){\r\n        return new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\r\n      },\r\n      month(){\r\n        return new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\r\n      },\r\n      all(){\r\n        return false;\r\n      }\r\n    };\r\n\r\n    if(timeRanges[timeRange]) {\r\n      return timeRanges[timeRange]();\r\n    } else {\r\n      return timeRanges['today']();\r\n    }\r\n  };\r\n\r\n  const selectedDate = getTimeRange(timeRange);\r\n\r\n\r\n  if(selectedDate !== false) filter.createdAt = { '$gte': selectedDate };\r\n  console.log(filter);\r\n  return invoices.find(filter, {sort: sort});\r\n};\r\n\r\n/*\r\ninvoices.createFilter = function(params){\r\n  let fn;\r\n  const typeCaster = function(type, variable) {\r\n    const types = {\r\n      text(v) {\r\n        return v;\r\n      },\r\n      number(v) {\r\n        return parseInt(v);\r\n      },\r\n      date(v) {\r\n        return new Date(v);\r\n      }\r\n    };\r\n    if(types[type]) {\r\n      return types[type](variable);\r\n    } else {\r\n      return types['text'](variable);\r\n    }\r\n  };\r\n  let filter = {};\r\n  params.forEach(function(param){\r\n    filter[param.name] = typeCaster(params.type, params,value);\r\n  });\r\n\r\n  console.log(filter);\r\n};\r\n  */"]},"hash":"13c81c35aa201396d3d7986cd0296c1cdf92ec50"}
