{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"invoices = new Mongo.Collection(\"invoices\");\ninvoices.limit_results_by = 50;\ninvoices.limit_increase_by = 50;\ninvoices.byTimeRange = function (timeRange, queryParams) {\n    if (timeRange === undefined) timeRange = \"today\";\n\n    if (queryParams !== undefined && queryParams.hasOwnProperty('limit')) {\n        var _limit = parseInt(queryParams.limit);\n        delete queryParams['limit'];\n    } else {\n        var _limit2 = invoices.limit_results_by;\n    }\n\n    queryParams = isEmpty(queryParams) ? { sortCreatedAt: \"DESC\", sortTotal: \"ASC\" } : queryParams;\n\n    var sort = {};\n    for (var k in babelHelpers.sanitizeForInObject(queryParams)) {\n        sort[k.replace('sort', '').firstToType('lower')] = queryParams[k] === 'DESC' ? -1 : 1;\n    }\n\n    var selectedDate = undefined;\n    var today = new Date();\n    switch (timeRange) {\n        case 'week':\n            selectedDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\n            break;\n        case 'month':\n            selectedDate = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n            break;\n        case 'all':\n            selectedDate = false;\n            break;\n        default:\n        case 'today':\n            selectedDate = today;\n            selectedDate.setSeconds(0);\n            selectedDate.setHours(0);\n            selectedDate.setMinutes(0);\n            break;\n    }\n\n    var filter = selectedDate !== false ? { createdAt: { '$gte': selectedDate } } : {};\n\n    return invoices.find(filter, { sort: sort, limit: limit });\n};","ast":null,"map":{"version":3,"sources":["/lib/invoiceCollection.js"],"names":[],"mappings":"AAAA,QAAQ,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAC5C,QAAQ,CAAC,gBAAgB,GAAG,EAAE,CAAC;AAC/B,QAAQ,CAAC,iBAAiB,GAAG,EAAE,CAAC;AAChC,QAAQ,CAAC,WAAW,GAAG,UAAS,SAAS,EAAY,WAAW,EAAE;QAAlC,SAAS,gBAAT,SAAS,GAAG,OAAO;;AAE3C,QAAG,WAAW,KAAK,SAAS,IAAI,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AACjE,YAAI,MAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACxC,eAAO,WAAW,CAAC,OAAO,CAAC,CAAC;KAC/B,MAAM;AACH,YAAI,OAAK,GAAG,QAAQ,CAAC,gBAAgB,CAAC;KACzC;;AAED,eAAW,GAAG,AAAC,OAAO,CAAC,WAAW,CAAC,GAAE,EAAC,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAC,GAAC,WAAW,CAAC;;AAE3F,QAAM,IAAI,GAAG,EAAE,CAAC;AAChB,SAAK,IAAI,CAAC,qCAAI,WAAW,GAAE;AACvB,YAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,AAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,GAAE,CAAC,CAAC,GAAC,CAAC,CAAC;KACvF;;AAED,QAAI,YAAY,YAAA,CAAC;AACjB,QAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;AACzB,YAAO,SAAS;AACZ,aAAK,MAAM;AACP,wBAAY,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AACpF,kBAAM;AAAA,AACV,aAAK,OAAO;AACR,wBAAY,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;AACpF,kBAAM;AAAA,AACV,aAAK,KAAK;AACN,wBAAY,GAAG,KAAK,CAAC;AACzB,kBAAM;AAAA,AACN,gBAAQ;AACR,aAAK,OAAO;AACR,wBAAY,GAAG,KAAK,CAAC;AACrB,wBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC3B,wBAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACzB,wBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC3B,kBAAM;AAAA,KACb;;AAED,QAAM,MAAM,GAAG,AAAC,YAAY,KAAK,KAAK,GAAE,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,EAAC,GAAC,EAAE,CAAC;;AAEtF,WAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;CAC5D,CAAC","file":"/lib/invoiceCollection.js.map","sourcesContent":["invoices = new Mongo.Collection(\"invoices\");\r\ninvoices.limit_results_by = 50;\r\ninvoices.limit_increase_by = 50;\r\ninvoices.byTimeRange = function(timeRange = \"today\", queryParams) {\r\n\r\n        if(queryParams !== undefined && queryParams.hasOwnProperty('limit')) {\r\n            let limit = parseInt(queryParams.limit);\r\n            delete queryParams['limit'];\r\n        } else {\r\n            let limit = invoices.limit_results_by;\r\n        }\r\n\r\n        queryParams = (isEmpty(queryParams))?{sortCreatedAt: \"DESC\", sortTotal: \"ASC\"}:queryParams;\r\n\r\n        const sort = {};\r\n        for (let k in queryParams) {\r\n            sort[k.replace('sort', '').firstToType('lower')] = (queryParams[k] === 'DESC')?-1:1;\r\n        }\r\n\r\n        let selectedDate;\r\n        const today = new Date();\r\n        switch(timeRange) {\r\n            case 'week':\r\n                selectedDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\r\n                break;\r\n            case 'month':\r\n                selectedDate = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\r\n                break;\r\n            case 'all':\r\n                selectedDate = false;\r\n            break;\r\n            default:\r\n            case 'today':\r\n                selectedDate = today;\r\n                selectedDate.setSeconds(0);\r\n                selectedDate.setHours(0);\r\n                selectedDate.setMinutes(0);\r\n                break;\r\n        }\r\n\r\n        const filter = (selectedDate !== false)?{ createdAt: { '$gte': selectedDate }}:{};\r\n\r\n    return invoices.find(filter, {sort: sort, limit: limit});\r\n};"]},"hash":"ebf4a5897d93a26be4962097603dea59d0677121"}
