{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"FlowRouter.route(\"/:type\", {\n    name: \"invoices\",\n    subscriptions: function (params, queryParams) {\n        this.register(\"invoiceCollection\", Meteor.subscribe(\"invoiceCollection\", params.type, queryParams));\n    },\n    action: function (params, queryParams) {\n        BlazeLayout.render(\"invoicesTemplate\");\n    }\n});\nFlowRouter.route(\"/\", {\n    subscriptions: function (params, queryParams) {\n        this.register(\"invoiceCollection\", Meteor.subscribe(\"invoiceCollection\"));\n    },\n    action: function (params, queryParams) {\n        BlazeLayout.render(\"invoicesTemplate\");\n    }\n});\n\nRouter = {\n    route: '',\n    reactvar: new ReactiveVar(0),\n    setRoute: function (routeName) {\n        this.route = routeName;\n    },\n\n    resetQuery: function () {\n        FlowRouter.go(FlowRouter.path(this.route, FlowRouter.current().params));\n    },\n\n    go: function (routeParams) {\n        var queryParamName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n\n        var currentQueryParams = FlowRouter.current().queryParams;\n\n        if (routeParams === '') routeParams = FlowRouter.current().params;\n\n        if (currentQueryParams.hasOwnProperty(queryParamName)) {\n            currentQueryParams[queryParamName] = currentQueryParams[queryParamName] == 'ASC' ? 'DESC' : 'ASC';\n        } else if (queryParamName !== '') {\n            currentQueryParams[queryParamName] = 'ASC';\n        }\n\n        if (!isEmpty(currentQueryParams)) {\n            FlowRouter.go(FlowRouter.path(this.route, routeParams, currentQueryParams));\n        } else {\n            FlowRouter.go(FlowRouter.path(this.route, routeParams));\n        }\n        this.reactvar = 1;\n        console.log('re', this.reactvar);\n    },\n\n    getParams: function () {\n        return FlowRouter.current().params;\n    },\n\n    getQueryParams: function () {\n        return FlowRouter.current().queryParams;\n    },\n    addQueryParam: function (name, value) {\n\n        var params = FlowRouter.current().queryParams;\n        params[name] = value;\n\n        FlowRouter.setQueryParams(params);\n    }\n};","ast":null,"map":{"version":3,"sources":["/lib/router.js"],"names":[],"mappings":"AAAA,UAAU,CAAC,KAAK,CAAC,QAAQ,EAAE;AACvB,QAAI,EAAE,UAAU;AAChB,iBAAa,EAAE,UAAS,MAAM,EAAE,WAAW,EAAE;AACrC,YAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,MAAM,CAAC,SAAS,CAAC,mBAAmB,EAAE,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;KAC3G;AACD,UAAM,EAAE,UAAS,MAAM,EAAE,WAAW,EAAE;AAClC,mBAAW,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;KAC1C;CACJ,CAAC,CAAC;AACH,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE;AAClB,iBAAa,EAAE,UAAS,MAAM,EAAE,WAAW,EAAE;AACzC,YAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,MAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;KAC7E;AACD,UAAM,EAAE,UAAS,MAAM,EAAE,WAAW,EAAE;AAClC,mBAAW,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;KAC1C;CACJ,CAAC,CAAC;;AAEH,MAAM,GAAG;AACL,SAAK,EAAE,EAAE;AACT,YAAQ,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;AAC5B,YAAQ,EAAE,UAAS,SAAS,EAAE;AAC1B,YAAI,CAAC,KAAK,GAAG,SAAS,CAAC;KAC1B;;AAED,cAAU,EAAE,YAAW;AACnB,kBAAU,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;KAC3E;;AAED,MAAE,EAAE,UAAS,WAAW,EAAuB;YAArB,cAAc,yDAAG,EAAE;;AAEzC,YAAM,kBAAkB,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC,WAAW,CAAC;;AAE5D,YAAG,WAAW,KAAK,EAAE,EACjB,WAAW,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;;AAE9C,YAAG,kBAAkB,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE;AAClD,8BAAkB,CAAC,cAAc,CAAC,GAAG,AAAC,kBAAkB,CAAC,cAAc,CAAC,IAAI,KAAK,GAAE,MAAM,GAAC,KAAK,CAAA;SAClG,MAAM,IAAG,cAAc,KAAK,EAAE,EAC/B;AACI,8BAAkB,CAAC,cAAc,CAAC,GAAG,KAAK,CAAC;SAC9C;;AAED,YAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;AAC7B,sBAAU,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,EAAE,kBAAkB,CAAC,CAAC,CAAC;SAC/E,MAAM;AACH,sBAAU,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAC;SAC3D;AACD,YAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;AAClB,eAAO,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;KACpC;;AAED,aAAS,EAAE,YAAW;AAClB,eAAO,UAAU,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;KACtC;;AAED,kBAAc,EAAE,YAAW;AACvB,eAAO,UAAU,CAAC,OAAO,EAAE,CAAC,WAAW,CAAC;KAC3C;AACD,iBAAa,EAAE,UAAS,IAAI,EAAE,KAAK,EAAE;;AAEjC,YAAM,MAAM,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC,WAAW,CAAC;AAChD,cAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;;AAErB,kBAAU,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;KACrC;CACJ,CAAC","file":"/lib/router.js.map","sourcesContent":["FlowRouter.route(\"/:type\", {\r\n    name: \"invoices\",\r\n    subscriptions: function(params, queryParams) {\r\n            this.register(\"invoiceCollection\", Meteor.subscribe(\"invoiceCollection\", params.type, queryParams));\r\n    },\r\n    action: function(params, queryParams) {\r\n        BlazeLayout.render(\"invoicesTemplate\");\r\n    }\r\n});\r\nFlowRouter.route(\"/\", {\r\n    subscriptions: function(params, queryParams) {\r\n        this.register(\"invoiceCollection\", Meteor.subscribe(\"invoiceCollection\"));\r\n    },\r\n    action: function(params, queryParams) {\r\n        BlazeLayout.render(\"invoicesTemplate\");\r\n    }\r\n});\r\n\r\nRouter = {\r\n    route: '',\r\n    reactvar: new ReactiveVar(0),\r\n    setRoute: function(routeName) {\r\n        this.route = routeName;\r\n    },\r\n\r\n    resetQuery: function() {\r\n        FlowRouter.go(FlowRouter.path(this.route, FlowRouter.current().params));\r\n    },\r\n\r\n    go: function(routeParams, queryParamName = '') {\r\n\r\n        const currentQueryParams = FlowRouter.current().queryParams;\r\n        \r\n        if(routeParams === '')\r\n            routeParams = FlowRouter.current().params;\r\n\r\n        if(currentQueryParams.hasOwnProperty(queryParamName)) {\r\n            currentQueryParams[queryParamName] = (currentQueryParams[queryParamName] == 'ASC')?'DESC':'ASC'\r\n        } else if(queryParamName !== '')\r\n        {\r\n            currentQueryParams[queryParamName] = 'ASC';\r\n        }\r\n\r\n        if(!isEmpty(currentQueryParams)) {\r\n            FlowRouter.go(FlowRouter.path(this.route, routeParams, currentQueryParams));\r\n        } else {\r\n            FlowRouter.go(FlowRouter.path(this.route, routeParams));\r\n        }\r\n        this.reactvar = 1;\r\n        console.log('re', this.reactvar);\r\n    },\r\n\r\n    getParams: function() {\r\n        return FlowRouter.current().params;\r\n    },\r\n\r\n    getQueryParams: function() {\r\n        return FlowRouter.current().queryParams;\r\n    },\r\n    addQueryParam: function(name, value) {\r\n\r\n        const params = FlowRouter.current().queryParams;\r\n        params[name] = value;\r\n\r\n        FlowRouter.setQueryParams(params);\r\n    }\r\n};"]},"hash":"5ae8d172f4186559e6499fb1e13588dd09a9ff5c"}
