{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"invoices = new Mongo.Collection(\"invoices\");\ninvoices.limit_results_by = 50;\ninvoices.limit_increase_by = 50;\ninvoices.byTimeRange = function (timeRange, queryParams) {\n  if (timeRange === undefined) timeRange = \"today\";\n\n  var limit = {};\n\n  if (queryParams !== undefined && queryParams.hasOwnProperty('limit')) {\n    limit = parseInt(queryParams.limit);\n    delete queryParams['limit'];\n  }\n\n  queryParams = isEmpty(queryParams) ? { sortCreatedAt: \"DESC\", sortTotal: \"ASC\" } : queryParams;\n\n  var sort = {};\n  for (var k in babelHelpers.sanitizeForInObject(queryParams)) {\n    sort[k.replace('sort', '').firstToType('lower')] = queryParams[k] === 'DESC' ? -1 : 1;\n  }\n\n  var selectedDate = undefined;\n  var today = new Date();\n  switch (timeRange) {\n    case 'week':\n      selectedDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\n      break;\n    case 'month':\n      selectedDate = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n      break;\n    case 'all':\n      selectedDate = false;\n      break;\n    default:\n    case 'today':\n      selectedDate = today;\n      selectedDate.setSeconds(0);\n      selectedDate.setHours(0);\n      selectedDate.setMinutes(0);\n      break;\n  }\n\n  var filter = selectedDate !== false ? { createdAt: { '$gte': selectedDate } } : {};\n  return invoices.find(filter, { sort: sort, limit: limit });\n};","ast":null,"map":{"version":3,"sources":["/lib/invoiceCollection.js"],"names":[],"mappings":"AAAA,QAAQ,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAC5C,QAAQ,CAAC,gBAAgB,GAAG,EAAE,CAAC;AAC/B,QAAQ,CAAC,iBAAiB,GAAG,EAAE,CAAC;AAChC,QAAQ,CAAC,WAAW,GAAG,UAAS,SAAS,EAAY,WAAW,EAAE;MAAlC,SAAS,gBAAT,SAAS,GAAG,OAAO;;AACjD,MAAI,KAAK,GAAG,EAAE,CAAC;;AAEf,MAAI,WAAW,KAAK,SAAS,IAAI,WAAW,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AACpE,SAAK,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACpC,WAAO,WAAW,CAAC,OAAO,CAAC,CAAC;GAC7B;;AAED,aAAW,GAAG,AAAC,OAAO,CAAC,WAAW,CAAC,GAAI,EAAC,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAC,GAAG,WAAW,CAAC;;AAE/F,MAAM,IAAI,GAAG,EAAE,CAAC;AAChB,OAAK,IAAI,CAAC,qCAAI,WAAW,GAAE;AACzB,QAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,AAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,GAAI,CAAC,CAAC,GAAG,CAAC,CAAC;GACzF;;AAED,MAAI,YAAY,YAAA,CAAC;AACjB,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;AACzB,UAAQ,SAAS;AACf,SAAK,MAAM;AACT,kBAAY,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;AACpF,YAAM;AAAA,AACR,SAAK,OAAO;AACV,kBAAY,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;AACpF,YAAM;AAAA,AACR,SAAK,KAAK;AACR,kBAAY,GAAG,KAAK,CAAC;AACrB,YAAM;AAAA,AACR,YAAQ;AACR,SAAK,OAAO;AACV,kBAAY,GAAG,KAAK,CAAC;AACrB,kBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC3B,kBAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACzB,kBAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC3B,YAAM;AAAA,GACT;;AAEK,MAAM,MAAM,GAAG,AAAC,YAAY,KAAK,KAAK,GAAE,EAAE,SAAS,EAAE,EAAE,MAAM,EAAE,YAAY,EAAE,EAAC,GAAC,EAAE,CAAC;AACtF,SAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC;CAC5D,CAAC","file":"/lib/invoiceCollection.js.map","sourcesContent":["invoices = new Mongo.Collection(\"invoices\");\r\ninvoices.limit_results_by = 50;\r\ninvoices.limit_increase_by = 50;\r\ninvoices.byTimeRange = function(timeRange = \"today\", queryParams) {\r\n  let limit = {};\r\n\r\n  if (queryParams !== undefined && queryParams.hasOwnProperty('limit')) {\r\n    limit = parseInt(queryParams.limit);\r\n    delete queryParams['limit'];\r\n  }\r\n\r\n  queryParams = (isEmpty(queryParams)) ? {sortCreatedAt: \"DESC\", sortTotal: \"ASC\"} : queryParams;\r\n\r\n  const sort = {};\r\n  for (let k in queryParams) {\r\n    sort[k.replace('sort', '').firstToType('lower')] = (queryParams[k] === 'DESC') ? -1 : 1;\r\n  }\r\n\r\n  let selectedDate;\r\n  const today = new Date();\r\n  switch (timeRange) {\r\n    case 'week':\r\n      selectedDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\r\n      break;\r\n    case 'month':\r\n      selectedDate = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\r\n      break;\r\n    case 'all':\r\n      selectedDate = false;\r\n      break;\r\n    default:\r\n    case 'today':\r\n      selectedDate = today;\r\n      selectedDate.setSeconds(0);\r\n      selectedDate.setHours(0);\r\n      selectedDate.setMinutes(0);\r\n      break;\r\n  }\r\n\r\n        const filter = (selectedDate !== false)?{ createdAt: { '$gte': selectedDate }}:{};\r\n    return invoices.find(filter, {sort: sort, limit: limit});\r\n};"]},"hash":"93af6c4303cc3e94425b85b69eeff51ae08d1feb"}
