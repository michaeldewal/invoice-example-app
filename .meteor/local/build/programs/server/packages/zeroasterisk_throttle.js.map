{"version":3,"sources":["meteor://ðŸ’»app/packages/zeroasterisk_throttle/throttle.js"],"names":[],"mappingsfile":"/packages/zeroasterisk_throttle.js","sourcesContent":["/**\n * Throttle A tool for limiting repeated calls to anything on the server\n * (the choice was made not to allow this on the client, so it's actually secure)\n *\n *\n * Configuration on the Server\n *\n *\n * Throttle.setDebugMode(true/false)\n * Throttle.setScope(\"user\") or \"global\" [default=global]\n */\nif (Meteor.isServer) {\n\n  Throttle = {};\n\n  // CONFIG\n  // collection name\n  //   You can set to null for single-node-app, RAM only, no MongoDB\n  //   Want more customization?  see: setCollection()\n  Throttle._collectionName = 'throttles';\n  // collection options\n  Throttle._collectionOptions = {};\n  // debug mode\n  Throttle.debug = false;\n  // scope: normal, user\n  //   if set to \"user\" all keys will become user specific not global\n  //   (on server, based on Meteor.userId())\n  Throttle.scope = 'normal';\n  // enable \"helper\" clientside methods\n  Throttle.isMethodhelpersAllowed = true;\n  // PLACEHOLDERS\n  // collection object placeholder\n  Throttle._collection = null;\n  // have we run setup yet?\n  Throttle.isSetup = false;\n\n  // Setup the Throttle Collection (or re-setup)\n  //   called automatically when collection is used\n  //   if you have to re-setup, call resetSetup() first\n  //   see also: setCollection(), setCollectionName(), getCollection()\n  Throttle.setup = function() {\n    if (this.isSetup && this._collection) {\n      return;\n    }\n    this.isSetup = true;\n    if (!this._collectionName) {\n      // no collectionName = no mongo, RAM only\n      //   NOTE that null (RAM ONLY) will not work on a multi-app setup\n      //   Also note that this may not be faster because it is non-indexed\n      //     (depending on your usage)\n      this._collection = new Mongo.Collection(null, this._collectionOptions);\n      return;\n    }\n    // MongoDB collection\n    //   want something else, or more configuration options?\n    //   no problem... see Throttle.setCollection()\n    //   and use it before anything else uses Throttle.\n    this._collection = new Mongo.Collection(\n      this._collectionName,\n      this._collectionOptions\n    );\n    this._collection._ensureIndex({key: 1});\n    this._collection._ensureIndex({expire: 1});\n  };\n\n  // clear existing setup (allowing for changing _collectionName)\n  Throttle.resetSetup = function() {\n    delete Throttle._collection;\n    Throttle._collection = null;\n    this.isSetup = false;\n  };\n\n  // Access to get the Throttle._collection object - it's a Meteor.Collection()\n  //   see setup(), setCollection()\n  Throttle.getCollection = function() {\n    this.setup();\n    return this._collection;\n  };\n\n  // Access to set the Throttle._collectionName string\n  //   see setup(), resetSetup(), setCollectionName(), getCollection()\n  Throttle.setCollection = function(input) {\n    if (typeof input === \"string\" || input === null) {\n      // assume this is _collectionName setting\n      return this.setCollectionName(input);\n    }\n    // assume this is _collection (the full collection object)\n    if (this.debug) {\n      console.log('Throttle.setCollection([object]) new collection set');\n    }\n    this._collection = input;\n    this.isSetup = true;\n  };\n\n  // Access to set the Throttle._collectionName string\n  //   see setup(), resetSetup(), setCollection(), getCollection()\n  Throttle.setCollectionName = function(name) {\n    check(name, Match.OneOf(String, null));\n    this._collectionName = name;\n    console.log('*** Throttle DEPRECATION NOTICE ***');\n    console.log('  Throttle.setCollectionName(' + name + ') reset called after');\n    console.log('    Future versions of Throttle will omit setCollectionName()');\n    console.log('    If you want to customize the collection, instead use setCollection()');\n    console.log('    Or you can manually set the Throttle._collectionName before setup, on server');\n    console.log('^^^ Throttle DEPRECATION NOTICE ^^^');\n    // reset setup() just in case it's already been called\n    this.resetSetup();\n  };\n\n  // Access to set the Throttle.debug Boolean\n  Throttle.setDebugMode = function(bool) {\n    check(bool, Boolean);\n    this.debug = bool;\n    if (this.debug) {\n      console.log('Throttle.setDebugMode(' + bool + ')');\n    }\n  };\n\n  // Access to set the Throttle.debug Boolean\n  //   see keyScope()\n  Throttle.setScope = function(scope) {\n    check(scope, String);\n    this.scope = scope;\n    if (this.debug) {\n      console.log('Throttle.setScope(' + scope + ')');\n    }\n  };\n\n  // Access to set the Throttle.isMethodhelpersAllowed Boolean\n  //   see checkAllowedMethods()\n  Throttle.setMethodsAllowed = function(bool) {\n    check(bool, Boolean);\n    this.isMethodhelpersAllowed = bool;\n    if (this.debug) {\n      console.log('Throttle.setMethodsAllowed(' + bool + ')');\n    }\n  };\n\n  // Modify the key based on Throttle.scope\n  Throttle.keyScope = function(key) {\n    check(key, String);\n    if (this.scope == 'user') {\n      // we want to append the userId to the key,\n      //   so that our Throttling is limited in scope to Meteor.userId()\n      //   (accross multiple sessions)\n      // if not authenticated, global scope is applied\n      var userId = Meteor.userId();\n      if (userId) {\n        key = key + '_u_' + Meteor.userId();\n      }\n    }\n    return key;\n  };\n\n  // check to see if we've done something too many times\n  // if we \"pass\" then go ahead and set... (shortcut)\n  Throttle.checkThenSet = function(key, allowed, expireInMS) {\n    if (!this.check(key, allowed)) {\n      return false;\n    }\n    return this.set(key, expireInMS)\n  };\n\n  // check to see if we've done something too many times\n  //   if more than allowed = false\n  Throttle.check = function(key, allowed) {\n    this.setup();\n    Throttle.purge();\n    key = Throttle.keyScope(key);\n    if (!_.isNumber(allowed)) {\n      allowed = 1;\n    }\n    if (Throttle.debug) {\n      console.log('Throttle.check(', key, allowed, ')');\n    }\n    return (this._collection.find({ key: key }).count() < allowed);\n  };\n\n  // create a record with\n  Throttle.set = function(key, expireInMS) {\n    this.setup();\n    key = Throttle.keyScope(key);\n    if (!_.isNumber(expireInMS)) {\n      expireInMS = 180000; // 3 min, default expire timestamp\n    }\n    var expireEpoch = this.epoch() + expireInMS;\n    if (Throttle.debug) {\n      console.log('Throttle.set(', key, expireInMS, ')');\n    }\n    this._collection.insert({\n      key: key,\n      expire: expireEpoch\n    });\n    return true;\n  };\n\n  // remove expired records\n  Throttle.purge = function() {\n    this.setup();\n    this._collection.remove({ expire: {$lt: this.epoch() } });\n  };\n\n  // simple tool to get a standardized epoch/timestamp\n  Throttle.epoch = function() {\n    var now = new Date;\n    return now.getTime();\n  };\n\n  // Rise exception if disabled client-side methods\n  //   see setMethodsAllowed()\n  Throttle.checkAllowedMethods = function()  {\n    if (Throttle.isMethodhelpersAllowed) {\n      return true;\n    }\n    throw new Meteor.Error(403, 'Client-side throttle disabled');\n  };\n\n  // expose some methods for easy access into Throttle from the client\n  Meteor.methods({\n    'throttle': function(key, allowed, expireInMS) {\n      Throttle.checkAllowedMethods();\n      check(key, String);\n      check(allowed, Match.Integer);\n      check(expireInMS, Match.Integer);\n      return Throttle.checkThenSet(key, allowed, expireInMS);\n    },\n    'throttle-set': function(key, expireInMS) {\n      Throttle.checkAllowedMethods();\n      check(key, String);\n      check(expireInMS, Match.Integer);\n      throw new Meteor.Error(403, 'Client-side throttle-set disabled as insecure');\n      /*\n       * Disabled as insecure\n       *   if you want this functionality, create your own method\n       *   (which is more secure anyway)\n       * https://github.com/zeroasterisk/Meteor-Throttle/issues/13\n       *\n      return Throttle.set(key, expireInMS);\n      */\n    },\n    'throttle-check': function(key, allowed) {\n      Throttle.checkAllowedMethods();\n      check(key, String);\n      check(allowed, Match.Integer);\n      return Throttle.check(key, allowed);\n    },\n    'throttle-debug': function(bool) {\n      Throttle.checkAllowedMethods();\n      return Throttle.setDebugMode(bool);\n    },\n  });\n\n}\n"]}